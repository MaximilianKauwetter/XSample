name: CI/CD Pipeline for Stock API

# Triggers:
# - Run on pushes to the 'main' branch
# - Run on pull requests targeting the 'main' branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  #----------------------------------------------------
  # 1. TEST JOB
  #    - Runs on all pushes and PRs
  #    - Runs unit/integration tests
  #----------------------------------------------------
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest  # Assuming pytest is used for testing

    - name: Run automated tests
      # This step assumes you have tests in a 'tests/' folder
      # We would write tests to:
      # 1. Mock the 'yfinance' API call
      # 2. Test the '/api/stats' endpoint with valid parameters
      # 3. Test for correct error (e.g., 400) when 'ticker' is missing
      # 4. Test the statistics calculations
      run: pytest tests/

  #----------------------------------------------------
  # 2. BUILD & PUSH JOB
  #    - Runs only if 'test' job succeeds
  #    - Runs only on a push to 'main' (not on PRs)
  #----------------------------------------------------
  build_and_push:
    runs-on: ubuntu-latest
    needs: test  # Depends on the 'test' job succeeding
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: your-username/stock-api:latest # Replace 'your-username'

  #----------------------------------------------------
  # 3. DEPLOY JOB
  #    - Runs only if 'build_and_push' job succeeds
  #    - Deploys the new image to a production server
  #----------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push  # Depends on the 'build_and_push' job succeeding

    steps:
    - name: Deploy to production server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}     # Server IP
        username: ${{ secrets.PROD_SERVER_USER }}   # SSH username
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}     # SSH private key

        # This script runs on the remote server:
        script: |
          # Log in to Docker (if using a private registry)
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # 1. Pull the new image
          docker pull your-username/stock-api:latest
          
          # 2. Stop the old container (if it exists)
          #    'docker stop ... || true' ensures the command doesn't fail if the container isn't running
          docker stop stock-api-container || true
          
          # 3. Remove the old container (if it exists)
          docker rm stock-api-container || true
          
          # 4. Run the new container with the 'latest' image
          docker run -d -p 5000:5000 --name stock-api-container your-username/stock-api:latest

    - name: Notify on failure (e.g., Slack)
      if: failure()
      run: |
        # Add a step to send a notification to Slack/Teams/Email
        echo "Deployment failed!"